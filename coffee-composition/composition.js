// Generated by CoffeeScript 1.7.1
(function() {
  var A, B, C, Composable, D, getPrototypeChain, getPrototypeChainMethods, getPrototypeMethods, isFunction,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  isFunction = function(obj) {
    return obj && Object.prototype.toString.call(obj) === "[object Function]";
  };

  getPrototypeChain = function(obj) {
    var chain;
    chain = [];
    chain.push(obj);
    while (obj = Object.getPrototypeOf(obj)) {
      if (obj !== Object.prototype) {
        chain.push(obj);
      }
    }
    return chain;
  };

  getPrototypeMethods = function(proto) {
    if (isFunction(proto)) {
      proto = proto.prototype;
    }
    return Object.getOwnPropertyNames(proto).filter(function(propName) {
      return propName !== "constructor" && isFunction(proto[propName]);
    });
  };

  getPrototypeChainMethods = function(obj) {
    var chain, methods, proto, _i, _len;
    if (isFunction(obj)) {
      obj = obj.prototype;
    }
    chain = getPrototypeChain(obj);
    methods = [];
    for (_i = 0, _len = chain.length; _i < _len; _i++) {
      proto = chain[_i];
      [].push.apply(methods, getPrototypeMethods(proto));
    }
    return methods;
  };

  Composable = (function() {
    function Composable() {}

    Composable.compose = function(componentObj, deep) {
      var className, prop, _results;
      _results = [];
      for (prop in componentObj) {
        className = componentObj[prop];
        _results.push((function(_this) {
          return function(prop, className) {
            var chain, proto, _i, _len, _results1;
            chain = (deep ? getPrototypeChain(className.prototype) : [className.prototype]);
            _results1 = [];
            for (_i = 0, _len = chain.length; _i < _len; _i++) {
              proto = chain[_i];
              _results1.push((function(proto) {
                var method, _j, _len1, _ref, _results2;
                _ref = getPrototypeMethods(proto);
                _results2 = [];
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  method = _ref[_j];
                  _results2.push((function(method) {
                    return _this.prototype[method] = function() {
                      return proto[method].apply(this[prop], arguments);
                    };
                  })(method));
                }
                return _results2;
              })(proto));
            }
            return _results1;
          };
        })(this)(prop, className));
      }
      return _results;
    };

    return Composable;

  })();

  window.A = A = (function() {
    function A() {}

    A.prototype.aMethod = function() {
      console.log("aMethod from class A");
      return console.log("this instance of A === " + (this instanceof A));
    };

    return A;

  })();

  window.B = B = (function() {
    function B() {}

    B.prototype.bMethod = function() {
      console.log("bMethod from class B");
      return console.log("this instance of B === " + (this instanceof B));
    };

    return B;

  })();

  window.C = C = (function(_super) {
    __extends(C, _super);

    function C() {
      this.a = new A();
      this.b = new B();
    }

    C.compose({
      a: A,
      b: B
    });

    return C;

  })(Composable);

  window.D = D = (function() {
    function D() {
      this.a = new A();
      this.b = new B();
      this.e = document.createElement("div");
    }

    D.prototype.onThis = function() {
      var args, method, rest;
      method = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      args = [].slice.call(rest);
      args = args.map(function(arg) {
        if (isFunction(arg)) {
          return arg.bind(this);
        } else {
          return arg;
        }
      });
      console.log(args);
      return this[method].apply(this, args);
    };

    Composable.compose.bind(D)({
      a: A,
      b: B,
      e: Element
    }, true);

    return D;

  })();

}).call(this);
