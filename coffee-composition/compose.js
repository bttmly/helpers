// Generated by CoffeeScript 1.7.1
(function() {
  var compose;

  this.compose = compose = (function() {
    var each, getPrototypeChain, getPrototypeMethods, isFunction;
    each = function(obj, itr) {
      var i, list;
      list = Array.isArray(obj) ? obj.map(function(e, i) {
        return i;
      }) : Object.keys(obj);
      i = 0;
      while (i < list.length) {
        itr(obj[list[i]], list[i], obj);
        i += 1;
      }
      return obj;
    };
    isFunction = function(obj) {
      return obj && Object.prototype.toString.call(obj) === "[object Function]";
    };
    getPrototypeChain = function(obj) {
      var chain;
      chain = [];
      if (obj.constructor !== Function) {
        obj = obj.constructor;
      }
      if (isFunction(obj)) {
        obj = obj.prototype;
      }
      chain.push(obj);
      while (obj = Object.getPrototypeOf(obj)) {
        chain.push(obj);
      }
      return chain;
    };
    getPrototypeMethods = function(proto) {
      if (proto.constructor !== Function) {
        proto = proto.constructor;
      }
      if (isFunction(proto)) {
        proto = proto.prototype;
      }
      return Object.getOwnPropertyNames(proto).filter(function(propName) {
        return isFunction(proto[propName]);
      });
    };
    return function(opt) {
      var bindCallbacks, bindMethods, composeFrom, composeTo;
      composeTo = opt.composeTo, composeFrom = opt.composeFrom, bindMethods = opt.bindMethods, bindCallbacks = opt.bindCallbacks;
      return each(composeFrom, (function(_this) {
        return function(cl, prop) {
          return each(getPrototypeChain(cl.prototype), function(proto) {
            return each(getPrototypeMethods(proto), function(method) {
              if (!composeTo.prototype[method]) {
                return composeTo.prototype[method] = function() {
                  var args, context;
                  context = bindMethods ? this : this[prop];
                  args = [].slice.call(arguments);
                  if (bindCallbacks) {
                    args = args.map(function(arg) {
                      if (isFunction(arg)) {
                        return arg.bind(context);
                      } else {
                        return arg;
                      }
                    });
                  }
                  return proto[method].apply(context, args);
                };
              }
            });
          });
        };
      })(this));
    };
  })();

}).call(this);
